{"version":3,"sources":["src/DOM.js","src/Request.js","src/FileSystem.js","src/Form.js","src/Platform.js","src/Preload.js","src/SpaceAdapter/LocalStorage.js","src/SpaceAdapter/SessionStorage.js","src/SpaceAdapter/IndexedDB.js","src/SpaceAdapter/RemoteStorage.js","src/Space.js","src/Text.js","src/Util.js","index.js"],"names":["$_","$_ready","DOM","selector","collection","document","querySelectorAll","length","NodeList","style","display","newClass","classList","add","oldClass","remove","element","item","classes","split","j","toggle","classToCheck","value","focus","callback","addEventListener","event","target","e","matches","call","querySelector","name","dataset","textContent","innerHTML","div","createElement","trim","appendChild","firstChild","childNodes","insertBefore","index","offsetWidth","offsetHeight","parentElement","rect","getBoundingClientRect","top","body","scrollTop","left","scrollLeft","find","get","parent","attribute","setAttribute","getAttribute","content","insertAdjacentHTML","properties","i","property","time","start","Date","getTime","timer","initialValue","setInterval","step","Math","min","opacity","last","tick","requestAnimationFrame","setTimeout","check","Element","prototype","polyfill","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","indexOf","parentNode","removeChild","replaceChild","reset","Request","data","Object","keys","map","key","encodeURIComponent","join","url","options","query","serialize","fetch","formData","headers","contentType","FormData","append","JSON","stringify","assign","post","method","then","response","json","blob","FileSystem","type","props","file","read","Promise","resolve","reject","reader","FileReader","onload","result","onerror","error","readAsDataURL","readAsArrayBuffer","readAsText","File","Form","field","each","files","Platform","window","devicePixelRatio","innerHeight","innerWidth","orientation","portrait","process","cordova","platform","match","navigator","includes","test","userAgent","location","protocol","Preload","route","image","Image","src","LocalStorage","version","store","numericVersion","parseInt","replace","id","storage","localStorage","open","setItem","currentValue","getItem","o","parse","exception","values","promises","push","all","oldVersion","newVersion","filter","previous","set","removeItem","oldId","full","SessionStorage","sessionStorage","IndexedDB","upgrades","IDBDatabase","indexedDB","onsuccess","onupgradeneeded","createObjectStore","createIndex","transaction","objectStore","op","put","getAll","delete","clear","RemoteStorage","endpoint","SpaceAdapter","Space","adapter","configuration","callbacks","transformations","object","create","update","contains","upgrade","rename","Text","text","txt","charAt","toUpperCase","substr","toLowerCase","suffix","position","getSelection","toString","selection","createRange","prefix","regex","replacements","RegExp","Util","callable","context","args","apply"],"mappings":"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","file":"artemis.min.map","sourceRoot":"..","sourcesContent":["/**\n * ==============================\n * DOM\n * ==============================\n */\n\n/**\n * Simple DOM manipulation functions\n *\n * @class\n */\nexport class DOM {\n\n\t/**\n\t * Create a new DOM object\n\t *\n\t * @constructor\n\t * @param  {string|Object|array} selector - Selector or DOM element to use\n\t * @return {DOM} - New instance of DOM\n\t */\n\tconstructor (selector) {\n\t\tif (typeof selector == 'string') {\n\t\t\tthis.collection = document.querySelectorAll (selector);\n\t\t\tthis.length = this.collection.length;\n\t\t} else if (selector instanceof NodeList) {\n\t\t\tthis.collection = selector;\n\t\t\tthis.length = selector.length;\n\t\t} else if (typeof selector == 'object') {\n\t\t\tif (selector.length >= 1) {\n\t\t\t\tthis.collection = selector;\n\t\t\t} else {\n\t\t\t\tthis.collection = [selector];\n\t\t\t}\n\t\t\tthis.length = this.collection.length;\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * Hide elements by setting their `display` property to 'none'.\n\t */\n\thide () {\n\t\tfor (const element of this.collection) {\n\t\t\telement.style.display = 'none';\n\t\t}\n\t}\n\n\t/**\n\t * Show elements by setting their `display` property to the given value.\n\t *\n\t * @param {string} [display='block'] - Display property to set\n\t */\n\tshow (display = 'block') {\n\t\tfor (const element of this.collection) {\n\t\t\telement.style.display = display;\n\t\t}\n\t}\n\n\t/**\n\t * Add a class to the classList object\n\t *\n\t * @param  {string} newClass - Class name to add\n\t */\n\taddClass (newClass) {\n\t\tfor (const element of this.collection) {\n\t\t\telement.classList.add (newClass);\n\t\t}\n\t}\n\n\t/**\n\t * Remove a given class from the classList object\n\t *\n\t * @param  {string} [oldClass=null] - Class to remove. If it's empty or null,\n\t * all classes will be removed\n\t */\n\tremoveClass (oldClass = null) {\n\t\tif (oldClass !== null) {\n\t\t\tfor (const element of this.collection) {\n\t\t\t\telement.classList.remove (oldClass);\n\t\t\t}\n\t\t} else {\n\t\t\tfor (const element of this.collection) {\n\t\t\t\twhile (element.classList.length > 0) {\n\t\t\t\t\telement.classList.remove (element.classList.item (0));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Toggle between two classes\n\t *\n\t * @param  {string} classes - Space separated class names\n\t */\n\ttoggleClass (classes) {\n\t\tclasses = classes.split (' ');\n\t\tfor (const element of this.collection) {\n\t\t\tfor (let j = 0; j < classes.length; j++) {\n\t\t\t\telement.classList.toggle (classes[j]);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Check if the first element matching the selector has the given class\n\t *\n\t * @param  {string} classToCheck - Class name to check for\n\t * @return {boolean} - Whether the class is present or not\n\t */\n\thasClass (classToCheck) {\n\t\tif (this.collection[0]) {\n\t\t\tfor (let j = 0; j < this.collection[0].classList.length; j++) {\n\t\t\t\tif (this.collection[0].classList[j] == classToCheck) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Get or set the value from the first element matching the selector\n\t *\n\t * @param  {string} value - Value to set to the element.\n\t * @return {string} - If no value was provided, this returns the value of the\n\t * element instead of setting it\n\t */\n\tvalue (value) {\n\t\tif (this.length > 0) {\n\t\t\tif (typeof value === 'undefined') {\n\t\t\t\treturn this.collection[0].value;\n\t\t\t} else {\n\t\t\t\tthis.collection[0].value = value;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Focus on the first element matching the selector\n\t */\n\tfocus () {\n\t\tif (this.length > 0) {\n\t\t\tthis.collection[0].focus ();\n\t\t}\n\t}\n\n\t/**\n\t * Add a callback for the 'click' event on every element matching the selector\n\t *\n\t * @param  {function} callback - Callback function to run when the event is triggered\n\t */\n\tclick (callback) {\n\t\tfor (const element of this.collection) {\n\t\t\telement.addEventListener ('click', callback, false);\n\t\t}\n\t}\n\n\t/**\n\t * Add a callback for the 'keyup' event on every element matching the selector\n\t *\n\t * @param  {function} callback - Callback function to run when the event is triggered\n\t */\n\tkeyup (callback) {\n\t\tfor (const element of this.collection) {\n\t\t\telement.addEventListener ('keyup', callback, false);\n\t\t}\n\t}\n\n\t/**\n\t * Add a callback for the 'keydown' event on every element matching the selector\n\t *\n\t * @param  {function} callback - Callback function to run when the event is triggered\n\t */\n\tkeydown (callback) {\n\t\tfor (const element of this.collection) {\n\t\t\telement.addEventListener ('keydown', callback, false);\n\t\t}\n\t}\n\n\t/**\n\t * Add a callback for the 'submit' event on every element matching the selector\n\t *\n\t * @param  {function} callback - Callback function to run when the event is triggered\n\t */\n\tsubmit (callback) {\n\t\tfor (const element of this.collection) {\n\t\t\telement.addEventListener ('submit', callback, false);\n\t\t}\n\t}\n\n\t/**\n\t * Add a callback for the 'change' event on every element matching the selector\n\t *\n\t * @param  {function} callback - Callback function to run when the event is triggered\n\t */\n\tchange (callback) {\n\t\tfor (const element of this.collection) {\n\t\t\telement.addEventListener ('change', callback, false);\n\t\t}\n\t}\n\n\t/**\n\t * Add a callback for the 'scroll' event on every element matching the selector\n\t *\n\t * @param  {function} callback - Callback function to run when the event is triggered\n\t */\n\tscroll (callback) {\n\t\tfor (const element of this.collection) {\n\t\t\telement.addEventListener ('scroll', callback, false);\n\t\t}\n\t}\n\n\t/**\n\t * Add a callback function to a given event\n\t *\n\t * @param  {string} event - Event to add the listener to\n\t * @param  {string} target - Target element on which to detect the event\n\t * @param  {function} callback - Callback function to run when the event is triggered\n\t */\n\ton (event, target, callback) {\n\t\tevent = event.split(' ');\n\t\tfor (const element of this.collection) {\n\t\t\tfor (let j = 0; j < event.length; j++) {\n\n\t\t\t\t// Check if no target was defined and just a function was provided\n\t\t\t\tif (typeof target === 'function') {\n\t\t\t\t\telement.addEventListener(event[j], target, false);\n\t\t\t\t} else if (typeof target === 'string' && typeof callback === 'function') {\n\t\t\t\t\telement.addEventListener(event[j], (e) => {\n\t\t\t\t\t\tif (e.target && $_(e.target).matches (target)) {\n\t\t\t\t\t\t\tcallback.call (e.target, e);\n\t\t\t\t\t\t}\n\t\t\t\t\t}, false);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Filter from the current collection to only those matching the new selector\n\t *\n\t * @param  {string} element - Selector to filter the collection with\n\t * @return {DOM} - New DOM instance with the filtered collection\n\t */\n\tfilter (selector) {\n\t\tif (this.length > 0) {\n\t\t\treturn new DOM (this.collection[0].querySelector (selector));\n\t\t}\n\t}\n\n\t/**\n\t * Get or set a `data` property\n\t *\n\t * @param  {string} name - Name of the data property\n\t * @param  {string} [value] - Value of the property\n\t * @return {string} - If no value is set, this function returns it's current value\n\t */\n\tdata (name, value) {\n\t\tif (this.length > 0) {\n\t\t\tif (typeof value === 'undefined') {\n\t\t\t\treturn this.collection[0].dataset[name];\n\t\t\t} else {\n\t\t\t\tthis.collection[0].dataset[name] = value;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Get or set the text of the first element matching the selector\n\t *\n\t * @param  {string} [value] - Value to set the text to\n\t * @return {type} - If no value is present, this function returns its the\n\t * element's current text.\n\t */\n\ttext (value) {\n\t\tif (this.length > 0) {\n\t\t\tif (typeof value === 'undefined') {\n\t\t\t\treturn this.collection[0].textContent;\n\t\t\t} else {\n\t\t\t\tthis.collection[0].textContent = value;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Get or set the inner HTML of the first element matching the selector\n\t *\n\t * @param  {string} [value] - Value to set the HTML to\n\t * @return {type} - If no value is present, this function returns its the\n\t * element's current HTML.\n\t */\n\thtml (value) {\n\t\tif (this.length > 0) {\n\t\t\tif (typeof value === 'undefined') {\n\t\t\t\treturn this.collection[0].innerHTML;\n\t\t\t} else {\n\t\t\t\tthis.collection[0].innerHTML = value;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Append an element to the first element matching the selector\n\t *\n\t * @param  {string} element - String representation of the element to add\n\t */\n\tappend (element) {\n\t\tif (this.length > 0) {\n\t\t\tconst div = document.createElement ('div');\n\t\t\tif (typeof element === 'string') {\n\t\t\t\tdiv.innerHTML = element.trim ();\n\t\t\t} else {\n\t\t\t\tdiv.innerHTML = element;\n\t\t\t}\n\t\t\tthis.collection[0].appendChild (div.firstChild);\n\t\t}\n\t}\n\n\t/**\n\t * Prepend an element to the first element matching the selector\n\t *\n\t * @param  {string} element - String representation of the element to add\n\t */\n\tprepend (element) {\n\t\tif (this.length > 0) {\n\t\t\tconst div = document.createElement ('div');\n\t\t\tif (typeof element === 'string') {\n\t\t\t\tdiv.innerHTML = element.trim ();\n\t\t\t} else {\n\t\t\t\tdiv.innerHTML = element;\n\t\t\t}\n\t\t\tif (this.collection[0].childNodes.length > 0) {\n\t\t\t\tthis.collection[0].insertBefore (div.firstChild, this.collection[0].childNodes[0]);\n\t\t\t} else {\n\t\t\t\tthis.collection[0].appendChild (div.firstChild);\n\t\t\t}\n\n\t\t}\n\t}\n\n\t/**\n\t * Iterate over the collection of elements matching the selector\n\t *\n\t * @param  {function} callback - Callback to run for every element\n\t */\n\teach (callback) {\n\t\tfor (const element of this.collection) {\n\t\t\tcallback (element);\n\t\t}\n\t}\n\n\t/**\n\t * Get an element from the collection given it's index\n\t *\n\t * @param  {int} index - Index of the element to retrieve\n\t * @return {HTMLElement} - HTML Element in the position indicated by the index\n\t */\n\tget (index) {\n\t\treturn this.collection[index];\n\t}\n\n\t/**\n\t * Get the first element in the collection\n\t *\n\t * @return {DOM} - DOM instance with the first element\n\t */\n\tfirst () {\n\t\tif (this.length > 0) {\n\t\t\treturn new DOM (this.collection[0]);\n\t\t}\n\t}\n\n\t/**\n\t * Check if the elements in the collection are visible by chacking their\n\t * display, offsetWidth and offsetHeight properties\n\t *\n\t * @return {boolean} - Whether the elements are visible or not\n\t */\n\tisVisible () {\n\t\tfor (const element of this.collection) {\n\t\t\tif (element.display != 'none' && element.offsetWidth > 0 && element.offsetHeight > 0) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Get the parent of the first element matching the selector\n\t *\n\t * @return {DOM} - DOM instance of the parent element\n\t */\n\tparent () {\n\t\tif (this.collection[0]) {\n\t\t\treturn new DOM (this.collection[0].parentElement);\n\t\t}\n\t}\n\n\t/**\n\t * Find an element that matches the given selector in the first element of the collection\n\t *\n\t * @param  {string} selector - Selector to find the element with\n\t * @return {DOM} - Aegis instance with the element if found\n\t */\n\tfind (selector) {\n\t\tif (this.collection[0]) {\n\t\t\treturn new DOM (this.collection[0].querySelectorAll (selector));\n\t\t}\n\t}\n\n\t/**\n\t * Get the top and left offsets of the first element matching the selector\n\t *\n\t * @return {Object} - Object with `top` and `left` offsets\n\t */\n\toffset () {\n\t\tif (this.collection[0]) {\n\t\t\tconst rect = this.collection[0].getBoundingClientRect ();\n\t\t\treturn {\n\t\t\t\ttop: rect.top + document.body.scrollTop,\n\t\t\t\tleft: rect.left + document.body.scrollLeft\n\t\t\t};\n\t\t}\n\t}\n\n\n\t/**\n\t * Find the closest element matching the given selector. This bubbles up\n\t * from the initial object and then follows to its parents.\n\t *\n\t * @param  {string} selector - Selector to match the closest element with\n\t * @return {DOM} - DOM instance with the closest HTML element matching the selector\n\t */\n\tclosest (selector) {\n\t\tlet element = this.find (selector);\n\t\twhile (typeof element.get (0) == 'undefined' && typeof this.parent().get (0) != 'undefined') {\n\t\t\telement = this.parent ().find (selector);\n\t\t}\n\t\treturn element;\n\t}\n\n\t/**\n\t * Get or set the value of a given attribute\n\t *\n\t * @param  {string} attribute - Attribute's name\n\t * @param  {string|Number} [value] - Value to set the attribute to\n\t * @return {type} - If no value is provided, this function returns the current\n\t * value of the provided attribute\n\t */\n\tattribute (attribute, value) {\n\t\tif (this.collection[0]) {\n\t\t\tif (typeof value === 'undefined') {\n\t\t\t\tthis.collection[0].getAttribute (attribute);\n\t\t\t} else {\n\t\t\t\treturn this.collection[0].setAttribute (attribute, value);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Insert content to the `after` property of an element\n\t *\n\t * @param  {string} content - String representation of the content to add\n\t */\n\tafter (content) {\n\t\tfor (const element of this.collection) {\n\t\t\telement.insertAdjacentHTML ('afterend', content);\n\t\t}\n\t}\n\n\t/**\n\t * Insert content to the `before` property of an element\n\t *\n\t * @param  {string} content - String representation of the content to add\n\t */\n\tbefore (content) {\n\t\tfor (const element of this.collection) {\n\t\t\telement.insertAdjacentHTML ('beforebegin', content);\n\t\t}\n\t}\n\n\t/**\n\t * Get or modify the `style` properties of the elements matching the selector\n\t *\n\t * @param  {string|Object} properties - Properties to change or get. Can be\n\t * either an individual property or a JSON object with key-value pairs\n\t * @param  {string} [value] - Value to set the property to when only changing\n\t * one property\n\t * @return {string} - If a peoperty is given but not a value for it, this\n\t * function will return its current value\n\t */\n\tstyle (properties, value) {\n\t\tfor (let i = 0; i < this.collection.length; i++) {\n\t\t\tif (typeof properties === 'string' && value !== 'undefined') {\n\t\t\t\tthis.collection[i].style[properties] = value;\n\t\t\t} else if (typeof properties === 'string' && value === 'undefined') {\n\t\t\t\treturn this.collection[i].style[properties];\n\t\t\t} else if (typeof properties === 'object') {\n\t\t\t\tfor (const property in properties) {\n\t\t\t\t\tthis.collection[i].style[property] = properties[property];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Animate the given `style` properties on all elements in the collection in\n\t * with a given time duration\n\t *\n\t * @param  {Object} style - JSON object with the key-value pairs of properties\n\t * to animate\n\t * @param  {int} time - Time in milliseconds during which the properties will\n\t * be animated\n\t */\n\tanimate (style, time) {\n\t\tfor (let i = 0; i < this.collection.length; i++) {\n\t\t\tfor (const property in style) {\n\n\t\t\t\tconst start = new Date().getTime();\n\t\t\t\tconst collection = this.collection;\n\t\t\t\tlet timer;\n\t\t\t\tlet initialValue;\n\t\t\t\tif (typeof this.collection[i].style[property] !== 'undefined') {\n\t\t\t\t\tinitialValue = this.collection[i].style[property];\n\n\t\t\t\t\ttimer = setInterval (() => {\n\t\t\t\t\t\tconst step = Math.min (1, (new Date ().getTime () - start) / time);\n\n\t\t\t\t\t\tcollection[i].style[property] = (initialValue + step * (style[property] - initialValue));\n\n\t\t\t\t\t\tif (step == 1) {\n\t\t\t\t\t\t\tclearInterval (timer);\n\t\t\t\t\t\t}\n\t\t\t\t\t}, 25);\n\t\t\t\t\tthis.collection[i].style[property] = initialValue;\n\n\t\t\t\t} else if (typeof (this.collection[i])[property] !== 'undefined') {\n\t\t\t\t\tinitialValue = (this.collection[i])[property];\n\n\t\t\t\t\ttimer = setInterval(() => {\n\t\t\t\t\t\tconst step = Math.min (1, (new Date ().getTime () - start) / time);\n\n\t\t\t\t\t\t(collection[i])[property] = (initialValue + step * (style[property] - initialValue));\n\n\t\t\t\t\t\tif (step == 1) {\n\t\t\t\t\t\t\tclearInterval (timer);\n\t\t\t\t\t\t}\n\t\t\t\t\t}, 25);\n\t\t\t\t\t(this.collection[i])[property] = initialValue;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Use a fade in animation i the first element matching the selector\n\t *\n\t * @param  {type} [time=400] - Time duration for the animation\n\t * @param  {type} callback - Callback function to run once the animation is over\n\t */\n\tfadeIn (time = 400, callback) {\n\t\tif (this.collection[0]) {\n\t\t\tconst element = this.collection[0];\n\t\t\telement.style.opacity = 0;\n\n\t\t\tlet last = +new Date();\n\n\t\t\tconst tick = () => {\n\t\t\t\telement.style.opacity = +element.style.opacity + (new Date() - last) / time;\n\t\t\t\tlast = +new Date();\n\n\t\t\t\tif (+element.style.opacity < 1) {\n\t\t\t\t\t(window.requestAnimationFrame && requestAnimationFrame(tick)) || setTimeout(tick, 16);\n\t\t\t\t} else {\n\t\t\t\t\tif (typeof callback === 'function') {\n\t\t\t\t\t\tcallback();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\ttick();\n\t\t}\n\t}\n\n\t/**\n\t * Use a fade out animation i the first element matching the selector\n\t *\n\t * @param  {type} [time=400] - Time duration for the animation\n\t * @param  {type} callback - Callback function to run once the animation is over\n\t */\n\tfadeOut (time = 400, callback) {\n\t\tif (this.collection[0]) {\n\t\t\tlet last = +new Date ();\n\t\t\tconst element = this.collection[0];\n\t\t\tconst tick = () => {\n\t\t\t\telement.style.opacity = +element.style.opacity - (new Date() - last) / time;\n\t\t\t\tlast = +new Date ();\n\n\t\t\t\tif (+element.style.opacity > 0) {\n\t\t\t\t\t(window.requestAnimationFrame && requestAnimationFrame (tick)) || setTimeout(tick, 16);\n\t\t\t\t} else {\n\t\t\t\t\tif (typeof callback === 'function') {\n\t\t\t\t\t\tcallback ();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\ttick ();\n\t\t}\n\t}\n\n\t/**\tCheck if the first element in the collection matches a given selector\n\t *\n\t * @param  {string} selector - Selector to match\n\t * @return {boolean} - Whether the element matches the selector or not\n\t */\n\tmatches (selector) {\n\t\tconst check = Element.prototype;\n\t\tconst polyfill = check.matches || check.webkitMatchesSelector || check.mozMatchesSelector || check.msMatchesSelector || function () {\n\t\t\treturn [].indexOf.call (document.querySelectorAll (selector), this) !== -1;\n\t\t};\n\t\treturn polyfill.call (this.collection[0], selector);\n\t}\n\n\t/**\n\t * Remove all elemets in the collection\n\t */\n\tremove () {\n\t\tfor (const element of this.collection) {\n\t\t\telement.parentNode.removeChild (element);\n\t\t}\n\t}\n\n\t/**\n\t * Replace the first element in the collection with a new one\n\t */\n\treplaceWith (element) {\n\t\tconst div = document.createElement ('div');\n\t\tdiv.innerHTML = element;\n\t\tthis.collection[0].parentElement.replaceChild (div, this.collection[0]);\n\t}\n\n\t/**\n\t * Reset every element in the collection\n\t */\n\treset () {\n\t\tif (this.length > 0) {\n\t\t\tthis.collection[0].reset ();\n\t\t}\n\t}\n\n\t/**\n\t * Get or set a property for the first element in the collection\n\t *\n\t * @param  {string} property - Property name to set or get\n\t * @param  {string|Number} [value] - Value to set the property to\n\t * @return {string|Number} - If no value is provided, this funcion will return the\n\t * current value of the indicated property\n\t */\n\tproperty (property, value) {\n\t\tif (this.collection[0]) {\n\t\t\tif (typeof value !== 'undefined') {\n\t\t\t\tthis.collection[0][property] = value;\n\t\t\t} else {\n\t\t\t\treturn this.collection[0][property];\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * Simple wrapper function to use the DOM library\n *\n * @param  {string|Object|array} selector - Selector or DOM element to use\n * @return {DOM} - DOM instance or class if no selector is used\n */\nexport function $_ (selector) {\n\tif (typeof selector !== 'undefined') {\n\t\treturn new DOM (selector);\n\t} else {\n\t\treturn DOM;\n\t}\n}\n\n/**\n * Utility function to attach the 'load' listener to the window\n *\n * @param  {function} callback - Callback function to run when the window is ready\n */\nexport function $_ready (callback) {\n\twindow.addEventListener ('load', callback);\n}","/**\n* ==============================\n* Request\n* ==============================\n*/\n\n/**\n * Simple Wrapper for the fetch API, providing simple functions to handle requests\n *\n * @class\n */\nexport class Request {\n\n\t/**\n\t * @static serialize - Serialize an object of data into a URI encoded format\n\t *\n\t * @param  {Object} data - Key-value object of data to serialize\n\t * @return {string} - Serialized Data\n\t */\n\tstatic serialize (data) {\n\t\treturn Object.keys (data).map ((key) => {\n\t\t\treturn encodeURIComponent (key) + '=' + encodeURIComponent (data[key]);\n\t\t}).join ('&');\n\t}\n\n\t/**\n\t * @static get - Make a GET request to a given URL with the provided data\n\t * parameters and an optional configuration object for the request.\n\t *\n\t * @param  {string} url - URL to make the request to\n\t * @param  {Object} [data = {}] - Parameters to send in the URL, represented\n\t * as a JSON object. These parameters will be sent as a query in the URL\n\t * @param  {Object} [options = {}] - Options object for configurations you want\n\t * to use in the fetch () request made.\n\t * @return {Promise<Response>} - Resolves to the response of the request\n\t */\n\tstatic get (url, data = {}, options = {}) {\n\t\tconst query = Request.serialize (data);\n\n\t\t// Check if there is actually any data parameters and join them to the\n\t\t// url as query parameters\n\t\tif (query !== '') {\n\t\t\turl = `${url}?${query}`;\n\t\t}\n\n\t\treturn fetch (url, options);\n\t}\n\n\t/**\n\t * @static post - Make a POST request to a given URL with the provided data\n\t * and an optional configuration object for the request.\n\t *\n\t * @param  {string} url - URL to make the request\n\t * @param  {Object} [data = {}] - Set of data to send in the URL, represented\n\t * as a JSON object\n \t * @param  {Object} [options = {}] - Options object for configurations you want\n\t * to use in the fetch () request made. The Content-Type header is used to\n\t * serialize data in the correct format and defaults to application/x-www-form-urlencoded\n\t * @return {Promise<Response>} - Resolves to the response of the request\n\t */\n\tstatic post (url, data, options = {}) {\n\t\tlet formData;\n\t\tif (typeof options.headers !== 'undefined') {\n\t\t\tconst contentType = options.headers['Content-Type'];\n\t\t\tif (typeof contentType !== 'undefined') {\n\t\t\t\tif (contentType == 'multipart/form-data') {\n\t\t\t\t\tformData = new FormData ();\n\t\t\t\t\tfor (const value in data) {\n\t\t\t\t\t\tformData.append (value, data[value]);\n\t\t\t\t\t}\n\t\t\t\t} else if (contentType == 'application/json') {\n\t\t\t\t\tformData = JSON.stringify (data);\n\t\t\t\t} else {\n\t\t\t\t\tformData = Request.serialize (data);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tformData = Request.serialize (data);\n\t\t}\n\n\t\treturn fetch (url, Object.assign ({}, {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/x-www-form-urlencoded'\n\t\t\t}\n\t\t}, options));\n\t}\n\n\t/**\n\t * @static put - Make a PUT request to a given URL with the provided data\n\t * and an optional configuration object for the request.\n\t *\n\t * @param  {string} url - URL to make the request\n\t * @param  {Object} [data = {}] - Set of data to send in the URL, represented\n\t * as a JSON object\n \t * @param  {Object} [options = {}] - Options object for configurations you want\n\t * to use in the fetch () request made. The Content-Type header is used to\n\t * serialize data in the correct format and defaults to application/x-www-form-urlencoded\n\t * @return {Promise<Response>} - Resolves to the response of the request\n\t */\n\tstatic put (url, data, options = {}) {\n\t\treturn Request.post (url, data, Object.assign ({}, {method: 'PUT'}, options));\n\t}\n\n\t/**\n\t * @static delete - Make a DELETE request to a given URL with the provided data\n\t * and an optional configuration object for the request.\n\t *\n\t * @param  {string} url - URL to make the request\n\t * @param  {Object} [data = {}] - Parameters to send in the URL, represented\n\t * as a JSON object. These parameters will be sent as a query in the URL\n \t * @param  {Object} [options = {}] - Options object for configurations you want\n\t * to use in the fetch () request made. The Content-Type header is used to\n\t * serialize data in the correct format and defaults to application/x-www-form-urlencoded\n\t * @return {Promise<Response>} - Resolves to the response of the request\n\t */\n\tstatic delete (url, data, options = {}) {\n\t\treturn Request.get (url, data, Object.assign ({}, {method: 'DELETE'}, options));\n\t}\n\n\t/**\n \t * @static json - Request a JSON object from a given URL through a GET request\n \t *\n \t * @param  {string} url - URL to make the request to\n \t * @param  {Object} [data = {}] - Parameters to send in the URL, represented\n \t * as a JSON object. These parameters will be sent as a query in the URL\n \t * @param  {Object} [options = {}] - Options object for configurations you want\n \t * to use in the fetch () request made.\n \t * @return {Promise<Object>} - Resolves to the json object obtained from the request response\n \t */\n\tstatic json (url, data = {}, options = {}) {\n\t\treturn Request.get (url, data, options).then ((response) => {\n\t\t\treturn response.json ();\n\t\t});\n\t}\n\n\t/**\n \t * @static blob - Request a Blob from a given URL through a GET request\n \t *\n \t * @param  {string} url - URL to make the request to\n \t * @param  {Object} [data = {}] - Parameters to send in the URL, represented\n \t * as a JSON object. These parameters will be sent as a query in the URL\n \t * @param  {Object} [options = {}] - Options object for configurations you want\n \t * to use in the fetch () request made.\n \t * @return {Promise<Blob>} - Resolves to the blob obtained from the request response\n \t */\n\tstatic blob (url, data = {}, options = {}) {\n\t\treturn Request.get (url, data, options).then ((response) => {\n\t\t\treturn response.blob ();\n\t\t});\n\t}\n}","/**\n * ==============================\n * File System\n * ==============================\n */\n\nimport { Request } from './Request';\n\n/**\n * A simple class wrapper for the File and FileReader web API, while this class\n * doesn't actually provide acces to the host file system, it does provide useful\n * utilities for form file inputs and remote content loading.\n *\n * @class\n */\nexport class FileSystem {\n\n\n\t/**\n\t * @static readRemote - Read a file from a remote location given a URL. This\n\t * function will fetch the file blob using the Request class and then use the\n\t * read () function to read the blob in the format required.\n\t *\n\t * @param {type} url - URL to fetch the file from\n\t * @param {type} [type = 'base64'] - Type of data to be read, values can be\n\t * 'text', 'base64' and 'buffer'. This parameter is used for the read () function.\n\t * @param {Object} [props = {}] - Props to send to the Request object\n\t * @return {Promise<ArrayBuffer|string>} - Content of the file. The format\n\t * depends on the type parameter used.\n\t */\n\tstatic readRemote (url, type = 'base64', props = {}) {\n\t\treturn Request.blob (url, {}, props).then ((file) => {\n\t\t\treturn FileSystem.read (file, type);\n\t\t});\n\t}\n\n\t/**\n\t * @static read - Read a given File or Blob object.\n\t *\n\t * @param  {File|Blob} file - File to read\n\t * @param  {string} [type = 'text'] - Type of data to be read, values can be\n\t * 'text', 'base64' and 'buffer'.\n\t * @return {Promise<Event, ArrayBuffer|string>} - Promise that resolves to\n\t * the Load event and content of the file. The format depends on the type\n\t * parameter used.\n\t */\n\tstatic read (file, type = 'text') {\n\t\treturn new Promise ((resolve, reject) => {\n\t\t\tconst reader = new FileReader ();\n\n\t\t\treader.onload = (event) => {\n\t\t\t\t// Pass down the event object and the content\n\t\t\t\tresolve (event, event.target.result);\n\t\t\t};\n\n\t\t\treader.onerror = (error) => {\n\t\t\t\treject (error);\n\t\t\t};\n\n\t\t\tif (type === 'base64') {\n\t\t\t\treader.readAsDataURL (file);\n\t\t\t} else if (type === 'buffer') {\n\t\t\t\treader.readAsArrayBuffer (file);\n\t\t\t} else {\n\t\t\t\treader.readAsText (file, 'UTF-8');\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * @static create - Create a new File, this uses the File API and will note\n\t * actually create a file in the user's file system, however using it with\n\t * other features, that may be possible\n\t *\n\t * @param  {string} file - Name of the file (Including extension)\n\t * @param  {ArrayBuffer|ArrayBufferView|Blob|string} content - Content to save in the file\n\t * @param  {string} [type = 'text/plain'] - Mime Type for the file\n\t * @return {Promise<File>}\n\t */\n\tstatic create (name, content, type = 'text/plain') {\n\t\treturn Promise.resolve (new File ([content], name, {type}));\n\t}\n}","/**\n* ==============================\n* Form\n* ==============================\n*/\n\nimport { $_ } from './DOM';\n\n/**\n * Utility class that provides simple function for filling and retrieving values\n * from froms. This class requires the use of the `data-form` attribute.\n *\n * @class\n */\nexport class Form {\n\n\t/**\n\t * @static fill - Fill a form's inputs with the given values. Each key in the\n\t * provided object must match the `name` attribute of the input to fill.\n\t *\n\t * @param  {string} name - Form name. Must match the `data-form` attribute of the Form.\n\t * @param  {Object} data - JSON object with key-value pairs to fill the inputs.\n\t */\n\tstatic fill (name, data) {\n\t\tfor (const field in data) {\n\t\t\tconst element = $_(`form[data-form='${name}'] [name='${field}']`).get (0);\n\t\t\tif (typeof element != 'undefined') {\n\t\t\t\tswitch (element.type) {\n\n\t\t\t\t\tcase 'file':\n\t\t\t\t\tcase 'file[]':\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\telement.value = data[field];\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t}\n\n\t/**\n\t * @static values - Get all the values from a form's input. The keys are mapped\n\t * using the `name` attribute of each input.\n\t *\n\t * @param  {string} name - Form name. Must match the `data-form` attribute of the Form.\n\t * @return {Object} - Key-value JSON object\n\t */\n\tstatic values (name) {\n\t\tconst data = {};\n\t\t$_(`form[data-form='${name}'] [name]`).each ((element) => {\n\t\t\tlet value;\n\t\t\tswitch (element.type) {\n\t\t\t\tcase 'file[]':\n\t\t\t\t\tvalue = element.files;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'file':\n\t\t\t\t\tvalue = element.files[0];\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tvalue = element.value;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (typeof value != 'undefined' && value !== null) {\n\t\t\t\tdata[element.name] = value;\n\t\t\t}\n\t\t});\n\n\t\treturn data;\n\t}\n}","/**\n* ==============================\n* Platform\n* ==============================\n*/\n\n/**\n * General checks for what kind of platform is the being used to run the app.\n * @class\n */\nexport class Platform {\n\n\t/**\n\t * Check if the screen has a retina pixel ratio\n\t * @returns {boolean}\n\t */\n\tstatic retina () {\n\t\treturn window.devicePixelRatio >= 2;\n\t}\n\n\t/**\n\t * Check if the device is on portrait orientation\n\t * @returns {boolean}\n\t */\n\tstatic portrait () {\n\t\treturn window.innerHeight > window.innerWidth;\n\t}\n\n\t/**\n\t * Check if the device is on landscape orientation\n\t * @returns {boolean}\n\t */\n\tstatic landscape () {\n\t\treturn (window.orientation === 90 || window.orientation === -90);\n\t}\n\n\t/**\n\t * Get device Orientation\n\t * @returns {string} portrait | landscape\n\t */\n\tstatic orientation () {\n\t\treturn Platform.portrait () ? 'portrait' : 'landscape';\n\t}\n\n\t/**\n\t * Check if the app is running over Electron\n\t * @returns {boolean}\n\t */\n\tstatic electron () {\n\t\treturn window && window.process && window.process.type;\n\t}\n\n\t/**\n\t * Check if the app is running over Cordova\n\t * @returns {boolean}\n\t */\n\tstatic cordova () {\n\t\treturn !!window.cordova;\n\t}\n\n\t/**\n\t * Check if the app is running in a desktop platform\n\t * @returns {boolean}\n\t */\n\tstatic desktop (platform = 'Any') {\n\t\tlet match = false;\n\t\tswitch (platform) {\n\t\t\tcase 'Windows':\n\t\t\t\tmatch = navigator.platform.includes ('Win');\n\t\t\t\tbreak;\n\n\t\t\tcase 'macOS':\n\t\t\t\tmatch = navigator.platform.includes ('Mac');\n\t\t\t\tbreak;\n\n\t\t\tcase 'Linux':\n\t\t\t\tmatch = navigator.platform.includes ('Linux');\n\t\t\t\tbreak;\n\n\t\t\tcase 'FreeBSD':\n\t\t\t\tmatch = navigator.platform.includes ('FreeBSD');\n\t\t\t\tbreak;\n\n\t\t\tcase 'webOS':\n\t\t\t\tmatch = navigator.platform.includes ('WebTV');\n\t\t\t\tbreak;\n\n\t\t\tcase 'Any':\n\t\t\tdefault:\n\t\t\t\tmatch = navigator.platform.includes ('Win')\n\t\t\t\t\t\t|| navigator.platform.includes ('Mac')\n\t\t\t\t\t\t|| navigator.platform.includes ('Linux')\n\t\t\t\t\t\t|| navigator.platform.includes ('FreeBSD')\n\t\t\t\t\t\t|| navigator.platform.includes ('WebTV');\n\t\t\t\tbreak;\n\t\t}\n\t\treturn match;\n\t}\n\n\t/**\n\t * Check if the app is running in a mobile platform\n\t * @param {string } [platform='Any'] - Check for a specific mobile platform [Android | iOS | Opera | Windows | BlackBerry | Any]\n\t * @returns {boolean}\n\t */\n\tstatic mobile (platform = 'Any') {\n\t\tlet match = false;\n\t\tswitch (platform) {\n\t\t\tcase 'Android':\n\t\t\t\tmatch = /Android/i.test (navigator.userAgent);\n\t\t\t\tbreak;\n\n\t\t\tcase 'iOS':\n\t\t\t\tmatch = /iPhone|iPad|iPod/i.test (navigator.userAgent);\n\t\t\t\tbreak;\n\n\t\t\tcase 'Opera':\n\t\t\t\tmatch = /Opera Mini/i.test (navigator.userAgent);\n\t\t\t\tbreak;\n\n\t\t\tcase 'Windows':\n\t\t\t\tmatch = /Windows Phone|IEMobile|WPDesktop/i.test (navigator.userAgent);\n\t\t\t\tbreak;\n\n\t\t\tcase 'BlackBerry':\n\t\t\t\tmatch = /BlackBerry|BB10/i.test (navigator.userAgent);\n\t\t\t\tbreak;\n\n\t\t\tcase 'Any':\n\t\t\tdefault:\n\t\t\t\tmatch = /Android|iPhone|iPad|iPod|Windows Phone|IEMobile|WPDesktop|BlackBerry|BB10/i.test (navigator.userAgent);\n\t\t\t\tbreak;\n\t\t}\n\t\treturn match;\n\t}\n\n\t/**\n\t * @static serviceWorkers - Check if the platform allows the use of service\n\t * workers\n\t *\n\t * @return {boolean} - Whether they're supported or not\n\t */\n\tstatic serviceWorkers () {\n\t\tif (typeof navigator !== 'undefined') {\n\t\t\tif ('serviceWorker' in navigator && location.protocol.indexOf ('http') > -1) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n}","/**\n * ==============================\n * Preload\n * ==============================\n */\n\nimport { Request } from './Request';\n\n/**\n * A simple class for asset preloading. This class assumes you have a service\n * worker set up that will be caching all requests.\n * @class\n */\nexport class Preload {\n\n\t/**\n\t * @static image - Preload an image file\n\t *\n\t * @param  {string} route - Route to the image\n\t * @return {Promise} - Resolves to the image object or gets rejected with\n\t * the rejection event\n\t */\n\tstatic image (route) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst image = new Image ();\n\n\t\t\timage.onload = () => {\n\t\t\t\tresolve (image);\n\t\t\t};\n\n\t\t\timage.onerror = (e) => {\n\t\t\t\treject (e);\n\t\t\t};\n\n\t\t\timage.src = route;\n\t\t});\n\t}\n\n\t/**\n\t * @static file - Preload any kind of file\n\t *\n\t * @param  {string} route - Route to the file\n\t * @return {Promise} - Resolves or rejects depending on request success\n\t */\n\tstatic file (route) {\n\t\treturn Request.blob (route);\n\t}\n}","/**\n* ==============================\n* Local Storage Adapter\n* ==============================\n*/\n\n/**\n * The Local Storage Adapter provides the Space Class the ability to interact\n * with the localStorage api found in most modern browsers.\n *\n * @class\n */\nexport class LocalStorage {\n\n\t/**\n\t * Create a new LocalStorage. If no configuration is provided, the LocalStorage\n\t * global object is used. The LocalStorage Adapter can provide independency\n\t * by store name and space name.\n\t *\n\t * @constructor\n\t * @param {Object} [configuration={name = '', version = '', store = ''}] - Configuration Object for the Adapter\n\t * @param {string} configuration.name - Name of the Space\n\t * @param {string} configuration.version - Version of the Space in Semantic versioning syntax\n\t * @param {string} configuration.store - Name of the Object Store to use\n\t *\n\t */\n\tconstructor ({name = '', version = '', store = ''}) {\n\t\tthis.name = name;\n\t\tthis.version = version;\n\t\tthis.store = store;\n\n\t\tif (this.version === '') {\n\t\t\tthis.numericVersion = 0;\n\t\t} else {\n\t\t\tthis.numericVersion = parseInt (version.replace (/\\./g, ''));\n\t\t}\n\n\t\tif (name !== '' && version !== '' && store !== '') {\n\t\t\tthis.id = `${this.name}::${this.store}::${this.version}_`;\n\t\t} else if (name !== '' && version !== '') {\n\t\t\tthis.id = `${this.name}::${this.version}_`;\n\t\t} else if (name !== '') {\n\t\t\tthis.id = `${this.name}::_`;\n\t\t} else {\n\t\t\tthis.id = '';\n\t\t}\n\t}\n\n\t/**\n\t * Open the Storage Object\n\t *\n\t * @return {Promise}\n\t */\n\topen () {\n\t\tif (typeof this.storage === 'undefined') {\n\t\t\tthis.storage = window.localStorage;\n\t\t}\n\t\treturn Promise.resolve (this);\n\t}\n\n\t/**\n\t * Store a key-value pair\n\t *\n\t * @param  {string} key - Key with which this value will be saved\n\t * @param  {Object|string|Number} - Value to save\n\t * @return {Promise}\n\t */\n\tset (key, value) {\n\t\treturn this.open ().then (() => {\n\n\t\t\tif (typeof value === 'object') {\n\t\t\t\tthis.storage.setItem (this.id + key, JSON.stringify (value));\n\t\t\t} else {\n\t\t\t\tthis.storage.setItem (this.id + key, value);\n\t\t\t}\n\n\t\t\treturn Promise.resolve ({key, value});\n\t\t});\n\t}\n\n\t/**\n\t * Update a key-value pair. In difference with the set () method, the update\n\t * method will use an Object.assign () in the case of objects so no value is\n\t * lost.\n\t *\n\t * @param  {string} key - Key with which this value will be saved\n\t * @param  {Object|string|Number} - Value to save\n\t * @return {Promise}\n\t */\n\tupdate (key, value) {\n\t\treturn this.get (key).then ((currentValue) => {\n\t\t\tif (typeof currentValue === 'object') {\n\t\t\t\tif (typeof value === 'object') {\n\t\t\t\t\tvalue = Object.assign ({}, currentValue, value);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.storage.setItem (this.id + key, value);\n\t\t\treturn Promise.resolve ({key, value});\n\t\t});\n\t}\n\n\t/**\n\t * Retrieves a value from storage given it's key\n\t *\n\t * @param  {string} - Key with which the value was saved\n\t * @return {Promise<Object>|Promise<string>|Promise<Number>} - Resolves to the retreived value\n\t * or its rejected if it doesn't exist\n\t */\n\tget (key) {\n\t\treturn this.open ().then (() => {\n\t\t\treturn new Promise ((resolve, reject) => {\n\t\t\t\tlet value = null;\n\t\t\t\tvalue = this.storage.getItem (this.id + key);\n\t\t\t\ttry {\n\t\t\t\t\tconst o = JSON.parse (value);\n\t\t\t\t\tif (o && typeof o === 'object') {\n\t\t\t\t\t\tvalue = o;\n\t\t\t\t\t}\n\t\t\t\t} catch (exception) {\n\t\t\t\t\t// Unable to parse to JSON\n\t\t\t\t}\n\n\t\t\t\tif (typeof value !== 'undefined' && value !== null) {\n\t\t\t\t\tresolve (value);\n\t\t\t\t} else {\n\t\t\t\t\treject ();\n\t\t\t\t}\n\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Retrieves all the values in the space in a key-value JSON object\n\t *\n\t * @return {Promise<Object>} - Resolves to the retreived values\n\t */\n\tgetAll () {\n\t\treturn this.keys ().then ((keys) => {\n\t\t\tconst values = {};\n\t\t\tconst promises = [];\n\t\t\tfor (const key of keys) {\n\t\t\t\tpromises.push (this.get (key).then ((value) => {\n\t\t\t\t\tvalues[key] = value;\n\t\t\t\t}));\n\t\t\t}\n\t\t\treturn Promise.all (promises).then (() => {\n\t\t\t\treturn values;\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Check if the space contains a given key.\n\t *\n\t * @param  {string} key - Key to look for.\n\t * @return {Promise} Promise gets resolved if it exists and rejected if\n\t * doesn't\n\t */\n\tcontains (key) {\n\t\treturn this.keys ().then ((keys) => {\n\t\t\tif (keys.includes (key)) {\n\t\t\t\tPromise.resolve ();\n\t\t\t} else {\n\t\t\t\treturn Promise.reject ();\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Upgrade a Space Version\n\t *\n\t * @param oldVersion {string} - The version of the storage to be upgraded\n\t * @param newVersion {string} - The version to be upgraded to\n\t * @param callback {function} - Function to transform the old stored values to the new version's format\n\t * @returns {Promise} Result of the upgrade operation\n\t */\n\tupgrade (oldVersion, newVersion) {\n\t\treturn this.open ().then (() => {\n\t\t\tif (this.version !== newVersion) {\n\t\t\t\tthis.version = newVersion;\n\t\t\t}\n\n\t\t\t// Get all keys from the previous version\n\t\t\tconst keys = Object.keys (this.storage).filter ((key) => {\n\t\t\t\treturn key.indexOf (`${this.name}::${oldVersion}_`) === 0;\n\t\t\t}).map ((key) => {\n\t\t\t\treturn key.replace (`${this.name}::${oldVersion}_`, '');\n\t\t\t});\n\n\t\t\tconst promises = [];\n\n\t\t\tfor (const key of keys) {\n\t\t\t\t// Get the value stored with the previous version\n\t\t\t\tlet previous = this.storage.getItem (`${this.name}::${oldVersion}_${key}`);\n\n\t\t\t\t// Transform string to JSON object if needed\n\t\t\t\ttry {\n\t\t\t\t\tconst o = JSON.parse (previous);\n\t\t\t\t\tif (o && typeof o === 'object') {\n\t\t\t\t\t\tprevious = o;\n\t\t\t\t\t}\n\t\t\t\t} catch (exception) {\n\t\t\t\t\t// Unable to parse to JSON\n\t\t\t\t}\n\n\t\t\t\tpromises.push (this.set (key, previous).then (() => {\n\t\t\t\t\t// Delete the previous element from storage\n\t\t\t\t\treturn this.storage.removeItem (`${this.name}::${oldVersion}_${key}`);\n\t\t\t\t}));\n\n\t\t\t\treturn Promise.all (promises);\n\t\t\t}\n\t\t\treturn Promise.reject ();\n\t\t});\n\t}\n\n\t/**\n\t * Rename a Space\n\t *\n\t * @param {string} name - New name to be used.\n\t * @returns {Promise} - Result of the rename operation\n\t */\n\trename (name) {\n\n\t\t// Check if the name is different\n\t\tif (this.name !== name) {\n\t\t\treturn this.keys ().then ((keys) => {\n\n\t\t\t\t// Save the previous Space id\n\t\t\t\tconst oldId = this.id;\n\n\t\t\t\t// Set new object properties with the new name\n\t\t\t\tthis.name = name;\n\t\t\t\tthis.id = `${this.name}::${this.version}_`;\n\t\t\t\tconst promises = [];\n\n\t\t\t\tfor (const key of keys) {\n\t\t\t\t\tpromises.push (this.set (key, this.storage.getItem (`${oldId}${key}`)).then (() => {\n\t\t\t\t\t\tthis.storage.removeItem (`${oldId}${key}`);\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t\treturn Promise.all (promises);\n\t\t\t});\n\t\t} else {\n\t\t\treturn Promise.reject ();\n\t\t}\n\t}\n\n\t/**\n\t * Get the key that corresponds to a given index in the storage\n\t *\n\t * @param  {Number} index - Index to get the key from\n\t * @param  {boolean} [full=false] - Whether to return the full key name including space id or just the key name\n\t * @return {Promise<string>} - Resolves to the key's name\n\t */\n\tkey (index, full = false) {\n\t\treturn this.open ().then (() => {\n\t\t\tif (full === true) {\n\t\t\t\treturn Promise.resolve (this.storage.key (index));\n\t\t\t} else {\n\t\t\t\treturn Promise.resolve (this.storage.key (index).replace (this.id, ''));\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Return all keys stored in the space.\n\t *\n\t * @param {boolean} [full=false] - Whether to return the full key name including space id or just the key name\n\t * @return {Promise<string[]>} - Array of keys\n\t */\n\tkeys (full = false) {\n\t\treturn this.open ().then (() => {\n\t\t\treturn Promise.resolve (Object.keys (this.storage).filter ((key) => {\n\t\t\t\treturn key.indexOf (this.id) === 0;\n\t\t\t}).map ((key) => {\n\t\t\t\tif (full === true) {\n\t\t\t\t\treturn key;\n\t\t\t\t} else {\n\t\t\t\t\treturn key.replace (this.id, '');\n\t\t\t\t}\n\t\t\t}));\n\t\t});\n\t}\n\n\t/**\n\t * Delete a value from the space given its key\n\t *\n\t * @param  {string} key - Key of the item to delete\n\t * @return {Promise<value>} - Resolves to the value of the deleted object\n\t */\n\tremove (key) {\n\t\treturn this.get (key).then ((value) => {\n\t\t\tthis.storage.removeItem (this.id + key);\n\t\t\treturn Promise.resolve (value);\n\t\t});\n\t}\n\n\t/**\n\t * Clear the entire space\n\t *\n\t * @return {Promise} - Result of the clear operation\n\t */\n\tclear () {\n\t\treturn this.keys ().then ((keys) => {\n\t\t\tfor (const key of keys) {\n\t\t\t\tthis.remove (key);\n\t\t\t}\n\t\t\treturn Promise.resolve ();\n\t\t});\n\t}\n}","/**\n* ==============================\n* Session Storage Adapter\n* ==============================\n*/\n\nimport { LocalStorage } from './LocalStorage';\n\n/**\n * The Session Storage Adapter provides the Space Class the ability to interact\n * with the sessionStorage api found in most modern browsers. Since this API\n * shares pretty much the same methods to the local storage one, this class\n * inherits from the LocalStorage adapter.\n *\n * @class\n */\nexport class SessionStorage extends LocalStorage {\n\n\t/**\n\t * Create a new SessionStorage. If no configuration is provided, the SessionStorage\n\t * global object is used.The SessionStorage Adapter can provide independency\n\t * by store name and space name.\n\t *\n\t * @constructor\n\t * @param {Object} [configuration={name = '', version = '', store = ''}] - Configuration Object for the Adapter\n\t * @param {string} configuration.name - Name of the Space\n\t * @param {string} configuration.version - Version of the Space in Semantic versioning syntax\n\t * @param {string} configuration.store - Name of the Object Store to use\n\t *\n\t */\n\tconstructor ({name = '', version = '', store = ''}) {\n\t\tsuper ({name, version, store});\n\t}\n\n\t/**\n\t * Open the Storage Object\n\n\t * @return {Promise<SessionStorage>}\n\t */\n\topen () {\n\t\tif (typeof this.storage === 'undefined') {\n\t\t\tthis.storage = window.sessionStorage;\n\t\t}\n\t\treturn Promise.resolve (this);\n\t}\n}","/**\n* ==============================\n* IndexedDB Adapter\n* ==============================\n*/\n\n/**\n * The IndexedDB Adapter provides the Space Class the ability to interact\n * with the IndexedDB API found in most modern browsers.\n *\n * @class\n */\nexport class IndexedDB {\n\n\t/**\n\t * Create a new IndexedDB. Differently from Local and Session Storages, the\n\t * IndexedDB Adapter requires a mandatory name, version and store name.\n\t *\n\t * @constructor\n\t * @param {Object} [configuration={name = '', version = '', store = '', props = {}, index = {}}] - Configuration Object for the Adapter\n\t * @param {string} configuration.name - Name of the Space\n\t * @param {string} configuration.version - Version of the Space in Semantic versioning syntax\n\t * @param {string} configuration.store - Name of the Object Store to use\n\t * @param {Object} configuration.props - Optional Parameters for the Object Store\n\t * @param {Object} configuration.index - Object of the indexes to declare for\n\t * the  Object Store. Each index is a JSON object with the following properties:\n\t * @param {String} configuration.index[...].name - Name for the Index\n\t * @param {String} configuration.index[...].field - Field on the store to apply the index to\n\t * @param {Object} configuration.index[...].props - Index properties object\n\t */\n\tconstructor ({name = '', version = '', store = '', props = {}, index = {}}) {\n\t\tthis.name = name;\n\t\tthis.version = version;\n\t\tthis.store = store;\n\t\tthis.props = props;\n\t\tthis.index = index;\n\n\t\tthis.upgrades = {};\n\n\t\tif (this.version === '') {\n\t\t\tthis.numericVersion = 0;\n\t\t} else {\n\t\t\tthis.numericVersion = parseInt (version.replace (/\\./g, ''));\n\t\t}\n\t}\n\n\t/**\n\t * Open the Storage Object\n\t *\n\t * @return {Promise}\n\t */\n\topen () {\n\n\t\tif (this.name === '') {\n\t\t\tconsole.error ('No name has been defined for IndexedDB space.');\n\t\t\treturn Promise.reject ();\n\t\t}\n\n\t\tif (this.store === '') {\n\t\t\tconsole.error ('No store has been defined for IndexedDB space.');\n\t\t\treturn Promise.reject ();\n\t\t}\n\n\t\tif (this.storage instanceof IDBDatabase) {\n\t\t\treturn Promise.resolve (this);\n\t\t} else if (this.storage instanceof Promise) {\n\t\t\treturn this.storage;\n\t\t} else {\n\t\t\tthis.storage = new Promise ((resolve, reject) => {\n\t\t\t\tconst storage = window.indexedDB.open (this.name, this.numericVersion);\n\n\t\t\t\tstorage.onerror = (event) => {\n\t\t\t\t\treject (event);\n\t\t\t\t};\n\n\t\t\t\tstorage.onsuccess = (event) => {\n\t\t\t\t\tresolve (event.target.result);\n\t\t\t\t};\n\n\t\t\t\tstorage.onupgradeneeded = (event) => {\n\t\t\t\t\tif (event.oldVersion < 1) {\n\t\t\t\t\t\tconst store = event.target.result.createObjectStore (this.store, this.props);\n\t\t\t\t\t\tfor (const index of Object.keys (this.index)) {\n\t\t\t\t\t\t\tstore.createIndex (this.index[index].name, this.index[index].field, this.index[index].props);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (typeof this.upgrades[event.newVersion] === 'function') {\n\t\t\t\t\t\tthis.upgrades[event.newVersion].call (this, event);\n\t\t\t\t\t}\n\t\t\t\t\tconst transaction = event.target.transaction;\n\t\t\t\t\ttransaction.addEventListener ('success', () => {\n\t\t\t\t\t\tresolve (event.target.result);\n\t\t\t\t\t});\n\t\t\t\t};\n\t\t\t}).then ((storage) => {\n\t\t\t\tthis.storage = storage;\n\t\t\t\treturn Promise.resolve (this);\n\t\t\t});\n\t\t\treturn this.storage;\n\t\t}\n\t}\n\n\t/**\n\t * Store a key-value pair. Because of the nature of a IndexedDB Database, the\n\t * stored values must be JSON objects.\n\t *\n\t * @param  {string} key - Key with which this value will be saved\n\t * @param  {Object} - Value to save\n\t * @return {Promise<Object>} - When resolved, a {key, value} object is handed\n\t * down, when it's rejected, the event is handed down.\n\t */\n\tset (key = null, value) {\n\t\treturn this.open ().then (() => {\n\t\t\treturn new Promise ((resolve, reject) => {\n\t\t\t\tconst transaction = this.storage.transaction (this.store, 'readwrite').objectStore (this.store);\n\t\t\t\tlet op;\n\t\t\t\tif (key !== null) {\n\t\t\t\t\top = transaction.put (Object.assign ({}, {id: key}, value));\n\t\t\t\t} else {\n\t\t\t\t\top = transaction.add (value);\n\t\t\t\t}\n\t\t\t\top.addEventListener ('success', (event) => { resolve ({key: event.target.result, value: value});});\n\t\t\t\top.addEventListener ('error', (event) => {reject (event);});\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Update a key-value pair. In difference with the set () method, the update\n\t * method will use an Object.assign () in the case of objects so no value is\n\t * lost.\n\t *\n\t * @param  {string} key - Key with which this value will be saved\n\t * @param  {Object} - Value to save\n\t * @return {Promise<Object>} - When resolved, a {key, value} object is handed\n\t * down, when it's rejected, the event is handed down.\n\t */\n\tupdate (key, value) {\n\t\treturn this.get (key).then ((currentValue) => {\n\t\t\treturn new Promise ((resolve, reject) => {\n\t\t\t\tconst transaction = this.storage.transaction (this.store, 'readwrite').objectStore (this.store);\n\t\t\t\tconst op = transaction.put (Object.assign ({}, currentValue, value));\n\t\t\t\top.addEventListener ('success', (event) => {resolve ({key: event.target.result, value: value});});\n\t\t\t\top.addEventListener ('error', (event) => {reject (event);});\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Retrieves a value from storage given it's key\n\t *\n\t * @param  {string} - Key with which the value was saved\n\t * @return {Promise<Object>} - Resolves to the retreived value or its rejected\n\t * if it doesn't exist\n\t */\n\tget (key) {\n\t\treturn this.open ().then (() => {\n\t\t\treturn new Promise ((resolve, reject) => {\n\t\t\t\tconst transaction = this.storage.transaction (this.store).objectStore (this.store);\n\t\t\t\tconst op = transaction.get (key);\n\n\t\t\t\top.addEventListener ('success', (event) => {resolve (event.target.result);});\n\t\t\t\top.addEventListener ('error', (event) => {reject (event);});\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Retrieves all the values in the space in a key-value JSON object\n\t *\n\t * @return {Promise<Object>} - Resolves to the retreived values\n\t */\n\tgetAll () {\n\t\treturn this.open ().then (() => {\n\t\t\treturn new Promise ((resolve, reject) => {\n\t\t\t\tconst transaction = this.storage.transaction (this.store).objectStore (this.store);\n\t\t\t\tconst op = transaction.getAll ();\n\n\t\t\t\top.addEventListener ('success', (event) => {resolve (event.target.result);});\n\t\t\t\top.addEventListener ('error', (event) => {reject (event);});\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Check if the space contains a given key.\n\t *\n\t * @param  {string} key - Key to look for.\n\t * @return {Promise} - Promise gets resolved if it exists and rejected if it\n\t * doesn't\n\t */\n\tcontains (key) {\n\t\treturn this.get (key).then ((keys) => {\n\t\t\tif (keys.includes (key)) {\n\t\t\t\tPromise.resolve ();\n\t\t\t} else {\n\t\t\t\treturn Promise.reject ();\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Upgrade a Space Version. Upgrades must be declared before the open ()\n\t * method is executed.\n\t *\n\t * @param {string} newVersion - The version to be upgraded to\n\t * @param {function} callback - Function to transform the old stored values to the new version's format\n\t * @returns {Promise} - Result of the upgrade operation\n\t */\n\tupgrade (newVersion, callback) {\n\t\tthis.upgrades[parseInt (newVersion.replace (/\\./g, ''))] = callback;\n\t\treturn Promise.resolve ();\n\t}\n\n\t/**\n\t * Renaming the space is not possible with the IndexedDB adapter therefore\n\t * this function always gets a rejection.\n\t *\n\t * @returns {Promise} - Result of the rename operation\n\t */\n\trename () {\n\t\treturn Promise.reject ();\n\t}\n\n\t/**\n\t * Getting a key by its index is not possible in this adapter, therefore this\n\t * function always gets rejected.\n\t *\n\t * @return {Promise} - Promise Rejection\n\t */\n\tkey () {\n\t\treturn Promise.reject ();\n\t}\n\n\t/**\n\t * Return all keys stored in the space.\n\t *\n\t * @return {Promise<string[]>}  - Array of keys\n\t */\n\tkeys () {\n\t\treturn this.open ().then (() => {\n\t\t\treturn new Promise ((resolve, reject) => {\n\t\t\t\tconst transaction = this.storage.transaction (this.store, 'readwrite').objectStore (this.store);\n\t\t\t\tconst op = transaction.keys ();\n\t\t\t\top.addEventListener ('success', (event) => {resolve (event.target.result);}, false);\n\t\t\t\top.addEventListener ('error', (event) => {reject (event);}, false);\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Delete a value from the space given its key\n\t *\n\t * @param  {string} key - Key of the item to delete\n\t * @return {Promise<key, value>} - Resolves to the key and value of the deleted object\n\t */\n\tremove (key) {\n\t\treturn this.get (key).then ((value) => {\n\t\t\treturn new Promise ((resolve, reject) => {\n\t\t\t\tconst transaction = this.storage.transaction (this.store, 'readwrite').objectStore (this.store);\n\t\t\t\tconst op = transaction.delete (key);\n\t\t\t\top.addEventListener ('success', () => {resolve (value);}, false);\n\t\t\t\top.addEventListener ('error', (event) => {reject (event);}, false);\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Clear the entire space\n\t *\n\t * @return {Promise} - Result of the clear operation\n\t */\n\tclear () {\n\t\treturn this.open ().then (() => {\n\t\t\treturn new Promise ((resolve, reject) => {\n\t\t\t\tconst transaction = this.storage.transaction (this.store, 'readwrite').objectStore (this.store);\n\t\t\t\tconst op = transaction.clear ();\n\t\t\t\top.addEventListener ('success', () => {resolve ();}, false);\n\t\t\t\top.addEventListener ('error', (event) => {reject (event);}, false);\n\t\t\t});\n\t\t});\n\t}\n}","/**\n* ==============================\n* Remote Storage Adapter\n* ==============================\n*/\n\nimport { Request } from './../Request';\n\n/**\n * The Remote Storage Adapter provides the Space Class the ability to interact\n * with a server in order to handle data persistance. The server's implementation\n * is up to the developer but it will need to respond to this adapter's request\n * formatting. This adapter uses the Request class to perfom its tasks.\n *\n * @class\n */\nexport class RemoteStorage {\n\n\t/**\n\t * Create a new Remote Storage. This adapter requires an endpoint url where\n\t * it will make the requests. If a store is defined, the request will be made\n\t * using the store as an URL, for example, let's assume the following endpoint:\n\t *\n\t * https://example.com/api/v1/\n\t *\n\t * If no store is defined, then the requests will be made to that simple route,\n\t * with a store definition, requests will be made to:\n\t *\n\t *  https://example.com/api/v1/{myStore}/\n\t *\n\t * The key of each item in this store represents another part of the request\n\t *\n\t * https://example.com/api/v1/{key}/\n\t *\n\t * Or:\n\t *\n\t * https://example.com/api/v1/{myStore}/{key}/\n\t *\n\t * This adapter just as the IndexedDB, works with JSON objects instead of string or\n\t * numeric values.\n\t *\n\t * @constructor\n\t * @param {object} [configuration={name = '', version = '', store = '', endpoint = '', props = {}] - Configuration Object for the Adapter\n\t * @param {string} configuration.name - Name of the Space\n\t * @param {string} configuration.version - Version of the Space in Semantic versioning syntax\n\t * @param {string} configuration.store - Name of the Object Store to use\n\t * @param {string} configuration.endpoint - Endpoint URL where the requests will be made\n\t * @param {string} configuration.props - Properties object to use for the fetch requests\n\t */\n\tconstructor ({name = '', version = '', store = '', endpoint = '', props = {}}) {\n\t\tthis.name = name;\n\t\tthis.version = version;\n\t\tthis.store = store;\n\t\tthis.endpoint = `${endpoint}${store}/`;\n\t\tthis.props = props;\n\t}\n\n\t/**\n\t * Open the Storage Object\n\t *\n\t * @return {Promise<RemoteStorage>}\n\t */\n\topen () {\n\t\tif (typeof this.storage === 'undefined') {\n\t\t\tthis.storage = Request;\n\t\t}\n\t\treturn Promise.resolve (this);\n\t}\n\n\t/**\n\t * Store a key-value pair. This function sends a POST request to the server\n\t *\n\t * @param  {string} key - Key with which this value will be saved\n\t * @param  {Object} value - Value to save\n\t * @return {Promise<Response>}\n\t */\n\tset (key, value) {\n\t\treturn this.open ().then (() => {\n\t\t\treturn this.storage.post (this.endpoint + key, value, this.props);\n\t\t});\n\t}\n\n\t/**\n\t * Update a key-value pair. In difference with the set () method, the update\n\t * method will use an Object.assign () in the case of objects so no value is\n\t * lost. This function sends a PUT request to the server.\n\t *\n\t * @param  {string} key - Key with which this value will be saved\n\t * @param  {Object} value - Value to save\n\t * @return {Promise<Object>}\n\t */\n\tupdate (key, value) {\n\t\treturn this.get (key).then ((currentValue) => {\n\t\t\treturn this.storage.put (this.endpoint + key, Object.assign ({}, currentValue, value), this.props).then ((response) => {\n\t\t\t\treturn response.json ();\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Retrieves a value from storage given it's key\n\t *\n\t * @param  {string} - Key with which the value was saved\n\t * @return {Promise<Object>} - Resolves to the retreived value or its rejected\n\t * if it doesn't exist\n\t */\n\tget (key) {\n\t\treturn this.open ().then (() => {\n\t\t\treturn this.storage.json (this.endpoint + key, {}, this.props);\n\t\t});\n\t}\n\n\t/**\n\t * Retrieves all the values in the space in a key-value JSON object\n\t *\n\t * @return {Promise<Object>} - Resolves to the retreived values\n\t */\n\tgetAll () {\n\t\treturn this.open ().then (() => {\n\t\t\treturn this.storage.json (this.endpoint, {}, this.props);\n\t\t});\n\t}\n\n\t/**\n\t * Check if a space contains a given key.\n\t *\n\t * @param  {string} key - Key to look for.\n\t * @return {Promise} Promise gets resolved if it exists and rejected if it\n\t * doesn't\n\t */\n\tcontains (key) {\n\t\treturn this.keys ().then ((keys) => {\n\t\t\tif (keys.includes (key)) {\n\t\t\t\tPromise.resolve ();\n\t\t\t} else {\n\t\t\t\treturn Promise.reject ();\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Upgrading the Storage must be done on the server side, therefore this function\n\t * always gets rejected.\n\t *\n\t * @returns {Promise}\n\t */\n\tupgrade () {\n\t\treturn Promise.reject ();\n\t}\n\n\t/**\n\t * Renaming the Storage must be done on the server side, therefore this function\n\t * always gets rejected.\n\t *\n\t * @returns {Promise}\n\t */\n\trename () {\n\t\treturn Promise.reject ();\n\t}\n\n\t/**\n\t * Getting a key by its index is not possible in this adapter, therefore this\n\t * function always gets rejected.\n\t *\n\t * @return {Promise} - Promise Rejection\n\t */\n\tkey () {\n\t\treturn Promise.reject ();\n\t}\n\n\t/**\n\t * Return all keys stored in the space. This makes a GET request to the full\n\t * endpoint (the URL of the endpoint and store name) with a keys query\n\t * parameter:\n\t *\n\t * https://example.com/api/v1/?keys=true\n \t *\n\t * Or:\n \t *\n \t * https://example.com/api/v1/{myStore}/?keys=true\n\t *\n\t * @return {Promise<string[]>} - Array of keys\n\t */\n\tkeys () {\n\t\treturn this.open ().then (() => {\n\t\t\treturn this.storage.json (this.endpoint, {keys: true}, this.props);\n\t\t});\n\t}\n\n\t/**\n\t * Delete a value from the space given it's key. This function sends a DELETE\n\t * request to the server.\n\t *\n\t * @param  {string} key - Key of the item to delete\n\t * @return {Promise<key, value>} - Resolves to the key and value of the deleted object\n\t */\n\tremove (key) {\n\t\treturn this.open ().then (() => {\n\t\t\treturn this.storage.delete (this.endpoint + key, {}, this.props).then ((response) => {\n\t\t\t\treturn Promise.resolve (key, response.json ());\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Clear the entire space. This function sends a DELETE request to the server.\n\t * The difference between a clear () and remove () operation is that the clear\n\t * operation does not uses a key in the URL where the request is made.\n\t *\n\t * @return {Promise} - Result of the clear operation\n\t */\n\tclear () {\n\t\treturn this.open ().then (() => {\n\t\t\treturn this.storage.delete (this.endpoint, {}, this.props);\n\t\t});\n\t}\n}","/**\n* ==============================\n* Space\n* ==============================\n*/\n\nimport { LocalStorage } from './SpaceAdapter/LocalStorage';\nimport { SessionStorage } from './SpaceAdapter/SessionStorage';\nimport { IndexedDB } from './SpaceAdapter/IndexedDB';\nimport { RemoteStorage } from './SpaceAdapter/RemoteStorage';\n\n/**\n * List of Adapters Available\n */\nexport const SpaceAdapter = {\n\tLocalStorage,\n\tSessionStorage,\n\tIndexedDB,\n\tRemoteStorage\n};\n\n/**\n * Space provides a simple wrapper for different Storage APIs. It aims to\n * provide data independence through storage namespaces and versioning, allowing\n * transparent data formatting and content modifications through versions.\n *\n * While this class documentation provides some information, specific details may\n * be addressed on the documentation of each adapter.\n *\n * @class\n */\nexport class Space {\n\n\t/**\n\t * Create a new Space Object. If no name and version is defined, the global LocalSpace space is used.\n\t *\n\t * @constructor\n\t * @param {SpaceAdapter} [adapter = SpaceAdapter.LocalStorage] - Space Adapter\n\t * to use. Currently LocalStorage, SessionStorage, IndexedDB and Server are\n\t * available\n\t * @param {Object} [configuration = {}] - Configuration object for the space.\n\t * This configuration may change depending on the adapter used, however all\n\t * adapters have support for a name, version and store properties.\n\t * @param {string} configuration.name - Name of the Space\n\t * @param {string} configuration.version - Version of the Space in Semantic versioning syntax\n\t * @param {string} configuration.store - Name of the Object Store to use\n\t */\n\tconstructor (adapter = SpaceAdapter.LocalStorage, configuration = {}) {\n\t\t// Assign the provided configuration to the default one\n\t\tthis.configuration = Object.assign ({}, {name: '', version: '', store: ''}, configuration);\n\n\t\t// Set up the adapter instance to use\n\t\tthis.adapter = new adapter (this.configuration);\n\n\t\t// This object stores all the callbacks the user can define for the\n\t\t// space operations\n\t\tthis.callbacks = {\n\t\t\t'create': [],\n\t\t\t'update': [],\n\t\t\t'delete': []\n\t\t};\n\n\t\t// A transformation is an object that can contain a set and get functions\n\t\t// every transformation will be applied to the retrieved value or to the\n\t\t// value before storing it.\n\t\tthis.transformations = {\n\n\t\t};\n\t}\n\n\t/**\n\t * Modify the space configuration, it will also be passed down to the adapter\n\t * using its configuration () function.\n\t *\n\t * @param  {object} - Configuration object to set up\n\t * @return {object} - Configuration object if no param was passed\n\t */\n\tconfiguration (object = null) {\n\t\tif (object !== null) {\n\t\t\tthis.configuration = Object.assign ({}, this.configuration, object);\n\t\t\tthis.adapter.configuration (object);\n\t\t} else {\n\t\t\treturn this.configuration;\n\t\t}\n\t}\n\n\t/**\n\t * Open the Storage Object to be used depending on the SpaceAdapter\n\t *\n\t * @return {Promise}\n\t */\n\topen () {\n\t\treturn this.adapter.open ().then (() => {\n\t\t\treturn Promise.resolve (this);\n\t\t});\n\t}\n\n\t/**\n\t * Store a key-value pair\n\t *\n\t * @param  {string} key - Key with which this value will be saved\n\t * @param  {Object|string|Number} - Value to save\n\t * @return {Promise}\n\t */\n\tset (key, value) {\n\t\t// Apply all set transformations to the value\n\t\tfor (const id of Object.keys (this.transformations)) {\n\t\t\tif (typeof this.transformations[id].set === 'function') {\n\t\t\t\tvalue = this.transformations[id].set.call (null, key, value);\n\t\t\t}\n\t\t}\n\n\t\treturn this.adapter.set (key, value).then (({key, value}) => {\n\t\t\tfor (const callback of this.callbacks.create) {\n\t\t\t\tcallback.call (null, key, value);\n\t\t\t}\n\t\t\treturn Promise.resolve ({key, value});\n\t\t});\n\t}\n\n\t/**\n\t * Update a key-value pair. In difference with the set () method, the update\n\t * method will use an Object.assign () in the case of objects so no value is\n\t * lost.\n\t *\n\t * @param  {string} key - Key with which this value will be saved\n\t * @param  {Object|string|Number} - Value to save\n\t * @return {Promise}\n\t */\n\tupdate (key, value) {\n\t\t// Apply all set transformations to the value\n\t\tfor (const id of Object.keys (this.transformations)) {\n\t\t\tif (typeof this.transformations[id].set === 'function') {\n\t\t\t\tvalue = this.transformations[id].set.call (null, key, value);\n\t\t\t}\n\t\t}\n\n\t\treturn this.adapter.update (key, value).then (({key, value}) => {\n\t\t\tfor (const callback of this.callbacks.update) {\n\t\t\t\tcallback.call (null, key, value);\n\t\t\t}\n\t\t\treturn Promise.resolve ({key, value});\n\t\t});\n\t}\n\n\t/**\n\t * Retrieves a value from storage given it's key\n\t *\n\t * @param  {string} - Key with which the value was saved\n\t * @return {Promise<Object>|Promise<string>|Promise<Number>} - Resolves to the retreived value\n\t * or its rejected if it doesn't exist.\n\t */\n\tget (key) {\n\t\treturn this.adapter.get (key).then ((value) => {\n\t\t\t// Apply all get transformations to the value\n\t\t\tfor (const id of Object.keys (this.transformations)) {\n\t\t\t\tif (typeof this.transformations[id].get === 'function') {\n\t\t\t\t\tvalue = this.transformations[id].get.call (null, key, value);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn value;\n\t\t});\n\t}\n\n\t/**\n\t * Retrieves all the values in the space in a key-value JSON object\n\t *\n\t * @return {Promise<Object>} - Resolves to the retreived values\n\t */\n\tgetAll () {\n\t\treturn this.adapter.getAll ().then ((values) => {\n\t\t\t// Apply all get transformations to the value\n\t\t\tfor (const key of Object.keys (values)) {\n\t\t\t\tfor (const id of Object.keys (this.transformations)) {\n\t\t\t\t\tif (typeof this.transformations[id].get === 'function') {\n\t\t\t\t\t\tvalues[key] = this.transformations[id].get.call (null, key, values[key]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn values;\n\t\t});\n\t}\n\n\t/**\n\t * Iterate over every value in the space\n\t *\n\t * @param  {function (key, value)} callback - A callback function receiving the\n\t * key and value of a value. Must return a callback\n\t * @return {Promise} - Resolves when all callbacks have been resolved.\n\t */\n\teach (callback) {\n\t\treturn this.getAll ().then ((values) => {\n\t\t\tconst promises = [];\n\t\t\tfor (const i of Object.keys (values)) {\n\t\t\t\tpromises.push (callback.call (this, i, values[i]));\n\t\t\t}\n\t\t\treturn Promise.all (promises);\n\t\t});\n\t}\n\n\t/**\n\t * Check if a space contains a given key. Not all adapters may give this information\n\t *\n\t * @param  {string} key - Key to look for.\n\t * @return {Promise} - Promise gets resolved if it exists and rejected if\n\t * doesn't\n\t */\n\tcontains (key) {\n\t\treturn this.adapter.contains (key);\n\t}\n\n\t/**\n\t * Upgrade a Space Version. Not all adapters may provide this functionality\n\t *\n\t * @param oldVersion {string} - The version of the storage to be upgraded\n\t * @param newVersion {string} - The version to be upgraded to\n\t * @returns {Promise} - Result of the upgrade operation\n\t */\n\tupgrade (oldVersion, newVersion) {\n\t\treturn this.adapter.upgrade (oldVersion, newVersion).then (() => {\n\t\t\treturn Promise.resolve (this);\n\t\t});\n\t}\n\n\t/**\n\t * Rename a Space. Not all adapters may provide this functionality\n\t *\n\t * @param {string} name - New name to be used.\n\t * @returns {Promise} Result of the rename operation\n\t */\n\trename (name) {\n\t\treturn this.adapter.rename (name);\n\t}\n\n\t/**\n\t * Add a callback function to be run every time a value is created.\n\t *\n\t * @param  {function (key, value)} callback - Callback Function. Key and Value pair will be sent as parameters when run.\n\t */\n\tonCreate (callback) {\n\t\tthis.callbacks.create.push (callback);\n\t}\n\n\t/**\n\t * Add a callback function to be run every time a value is updated.\n\t *\n\t * @param  {function (key, value)} callback - Callback Function. Key and Value pair will be sent as parameters when run.\n\t */\n\tonUpdate (callback) {\n\t\tthis.callbacks.update.push (callback);\n\t}\n\n\t/**\n\t * Add a callback function to be run every time a value is deleted.\n\t *\n\t * @param  {function (key, value)} callback - Callback Function. Key and Value pair will be sent as parameters when run.\n\t */\n\tonDelete (callback) {\n\t\tthis.callbacks.delete.push (callback);\n\t}\n\n\t/**\n\t * Add a transformation function to the space.\n\t *\n\t * @param  {string} id - Unique transformation name or identifier\n\t * @param  {function (key, value)|null} get - Transformation function to apply to the content before\n\t * returning the value when using the get () function .\n\t * @param  {function (key, value)|null} set - Transformation function to apply to the content before\n\t * saving it when using the set () function befo.\n\t */\n\taddTransformation ({id, get, set}) {\n\t\tthis.transformations[id] = {\n\t\t\tid,\n\t\t\tget,\n\t\t\tset\n\t\t};\n\t}\n\n\t/**\n\t * Remove a transformation function given its id\n\t *\n\t * @param  {string} id - Name or identifier of the transformation to remove\n\t */\n\tremoveTransformation (id) {\n\t\tdelete this.transformations[id];\n\t}\n\n\t/**\n\t * Get the key that corresponds to a given index in the storage. Not all adapters may provide this functionality\n\t *\n\t * @param  {Number} index - Index to get the key from\n\t * @param  {boolean} [full = false] - Whether to return the full key name including space id or just the key name\n\t * @return {Promise<string>} - Resolves to the key's name\n\t */\n\tkey (index, full = false) {\n\t\treturn this.adapter.key (index, full);\n\t}\n\n\t/**\n\t * Return all keys stored in the space. Not all adapters may provide this functionality\n\t *\n\t * @param {boolean} [full = false] - Whether to return the full key name including space id or just the key name\n\t * @return {Promise<string[]>} - Array of keys\n\t */\n\tkeys (full = false) {\n\t\treturn this.adapter.keys (full);\n\t}\n\n\t/**\n\t * Delete a value from the space given it's key\n\t *\n\t * @param  {string} key - Key of the item to delete\n\t * @return {Promise<key, value>} - Resolves to the key and value of the deleted object\n\t */\n\tremove (key) {\n\t\treturn this.adapter.remove (key).then ((value) => {\n\t\t\t// Run the callback for deletions\n\t\t\tfor (const callback of this.callbacks.delete) {\n\t\t\t\tcallback.call (null, key, value);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Clear the entire space\n\t *\n\t * @return {Promise} - Result of the clear operation\n\t */\n\tclear () {\n\t\treturn this.adapter.clear ();\n\t}\n}","/**\n* ==============================\n* Text\n* ==============================\n*/\n\n/**\n * Provides utility functions for texts\n * @class\n */\nexport class Text {\n\n\t/**\n\t * @static capitalize - Capatalizes every word in a string\n\t *\n\t * @param  {string} text - Text string to capitalize\n\t * @return {string} - Capitalized string\n\t */\n\tstatic capitalize (text) {\n\t\treturn text.replace (/\\w\\S*/g, (txt) => {\n\t\t\treturn txt.charAt (0).toUpperCase () + txt.substr (1).toLowerCase ();\n\t\t});\n\t}\n\n\t/**\n\t * @static suffix - Gets the suffix of a string given a key\n\t *\n\t * @param  {string} key - Key part of the string\n\t * @param  {string} text - Full string to extract the suffix from\n\t * @return {string} - Suffix\n\t */\n\tstatic suffix (key, text) {\n\t\tlet suffix = '';\n\t\tlet position = text.indexOf (key);\n\t\tif (position !== -1) {\n\t\t\tposition += key.length;\n\t\t\tsuffix = text.substr (position, text.length - position);\n\t\t}\n\t\treturn suffix;\n\t}\n\n\n\t/**\n\t * @static selection - Get the currently selected text\n\t *\n\t * @return {string} - Text selection\n\t */\n\tstatic selection () {\n\t\tif (window.getSelection) {\n\t\t\treturn window.getSelection ().toString ();\n\t\t} else if (document.selection && document.selection.type != 'Control') {\n\t\t\treturn document.selection.createRange ().text;\n\t\t}\n\t}\n\n\t/**\n\t * @static prefix - Gets the prefix of a string given a key\n\t *\n\t * @param  {string} key - Key part of the string\n\t * @param  {string} text - Full string to extract the prefix from\n\t * @return {string} - Prefix\n\t */\n\tstatic prefix (key, text) {\n\t\tlet prefix = '';\n\t\tconst position = text.indexOf (key);\n\t\tif (position != -1) {\n\t\t\tprefix = text.substr (0, position);\n\t\t}\n\t\treturn prefix;\n\t}\n\n\t/**\n\t * @static friendly - Transforms a given text into a friendly URL string replacing all special characters\n\t *\n\t * @param  {string} text - The text to build the url from\n\t * @return {string} - Friendly URL\n\t */\n\tstatic friendly (text) {\n\t\tconst regex = [\n\t\t\t/[áàâãªä]/,\n\t\t\t/[ÁÀÂÃÄ]/,\n\t\t\t/[ÍÌÎÏ]/,\n\t\t\t/[íìîï]/,\n\t\t\t/[éèêë]/,\n\t\t\t/[ÉÈÊË]/,\n\t\t\t/[óòôõºö]/,\n\t\t\t/[ÓÒÔÕÖ]/,\n\t\t\t/[úùûü]/,\n\t\t\t/[ÚÙÛÜ]/,\n\t\t\t/ç/,\n\t\t\t/Ç/,\n\t\t\t/ñ/,\n\t\t\t/Ñ/,\n\t\t\t/_/,\n\t\t\t/[’‘‹›<>']/,\n\t\t\t/[“”«»„\"]/,\n\t\t\t/[(){}[\\]]/,\n\t\t\t/[?¿!¡#$%&^*´`~/°|]/,\n\t\t\t/[,.:;]/,\n\t\t\t/ /\n\t\t];\n\n\t\tconst replacements = [\n\t\t\t'a',\n\t\t\t'A',\n\t\t\t'I',\n\t\t\t'i',\n\t\t\t'e',\n\t\t\t'E',\n\t\t\t'o',\n\t\t\t'O',\n\t\t\t'u',\n\t\t\t'U',\n\t\t\t'c',\n\t\t\t'C',\n\t\t\t'n',\n\t\t\t'N',\n\t\t\t'-',\n\t\t\t'',\n\t\t\t'',\n\t\t\t'',\n\t\t\t'',\n\t\t\t'',\n\t\t\t'-'\n\t\t];\n\n\t\tfor (const index in regex) {\n\t\t\ttext = text.replace(new RegExp(regex[index], 'g'), replacements[index]);\n\t\t}\n\n\t\treturn text;\n\t}\n}","/**\n* ==============================\n* Util\n* ==============================\n*/\n\n/**\n * Provides diverse utility functions\n * @class\n */\nexport class Util {\n\n\tstatic callAsync (callable, context, ...args) {\n\t\t// Create our own promise\n\t\treturn new Promise ((resolve, reject) => {\n\t\t\t// Use a try catch so we can reject the promise in case of an error\n\t\t\t// while running the function\n\t\t\ttry {\n\t\t\t\t// Call the provided function using the context and arguments given\n\t\t\t\tconst result = callable.apply (context, args);\n\n\t\t\t\t// Check if the function returned a simple value or a Promise\n\t\t\t\tif (result instanceof Promise) {\n\t\t\t\t\treturn result;\n\t\t\t\t} else {\n\t\t\t\t\tresolve (result);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\treject (e);\n\t\t\t}\n\t\t});\n\t}\n}","export * from './src/DOM';\nexport * from './src/FileSystem';\nexport * from './src/Form';\nexport * from './src/Platform';\nexport * from './src/Preload';\nexport * from './src/Request';\nexport * from './src/Space';\nexport * from './src/Text';\nexport * from './src/Util';"]}